data = training[, -c(159)],
trControl = trainControl(method = "cv"))
mod1
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = training[, -c(159)],
trControl = trainControl(method = "boot"))
data = training[, -c(159)],
mod1
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = training[, -c(159)],
trControl = trainControl(method = "cv", number = 10))
warnings()
mod1
rm(data)
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = training[, -c(159)],
trControl = trainControl(method = "cv"))
mod1
preObj <- preProcess(training[, -159], method = c("center", "scale"))
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = preObj, trControl = trainControl(method = "cv"))
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = training[,-159],
trControl = trainControl(method = "cv"),
preProcess = c("center", "sclae"))
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = training[,-159],
trControl = trainControl(method = "cv"),
preProcess = c("center", "scale"))
mod1
set.seed(1111911)
mod1 <- train(correct ~ ., method = "glm", family = "binomial",
data = training[,-159],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"))
mod1
mod1 <- train(correct ~ ., method = "rpart",
data = training[,-159],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"))
mod1
names(traininf)
names(training)
training[, !names(training) %in% c("classe")]
names(training[, !names(training) %in% c("classe")])
mod2 <- train(classe ~ ., method = "rpart",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"))
mod2
mod1
mod3 <- train(classe ~ ., method = "rf",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"))
mod3
plot(mod3)
suppress.warnings(mod3 <- train(classe ~ ., method = "rf",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE))
suppressWarnings(mod3 <- train(classe ~ ., method = "rf",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE))
mod3
set.seed(1111911)
suppressWarnings(mod1 <- train(correct ~ ., method = "rpart",
data = training[, !names(training) %in% c("classe")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# inital classification model
suppressWarnings(mod2 <- train(classe ~ ., method = "rpart",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# classification using random forest
suppressWarnings(mod3 <- train(classe ~ ., method = "rf",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE))
confusionMatrix(predict(mod1, tuning), na.omit(tuning)$correct)
confusionMatrix(predict(mod2, tuning), na.omit(tuning)$classe)
confusionMatrix(predict(mod3, tuning), na.omit(tuning)$classe)
confusionMatrix(predict(mod1, tuning), na.omit(tuning)$correct)$overall[1]
confusionMatrix(predict(mod1, tuning), na.omit(tuning)$correct)$overall
confusionMatrix(predict(mod1, tuning), na.omit(tuning)$correct)
confusionMatrix(predict(mod1, tuning), na.omit(tuning)$correct)$overall[1]
confusionMatrix(predict(mod2, tuning), na.omit(tuning)$classe)$overall[1]
confusionMatrix(predict(mod3, tuning), na.omit(tuning)$classe)$overall[1]
confusionMatrix(predict(mod3, tuning), na.omit(tuning)$classe)
names(training[, which(!is.na(training))])
names(training[, !sapply(training, function(x) any(is.na(x)))])
dim(training)
dim(na.omit(training))
dim(na.omit(training))[1]
training2 <- training[, !sapply(training, function(x) any(is.na(x)))]
dim(trainin2)
dim(training2)
set.seed(05081945)
suppressWarnings(mod1b <- train(correct ~ ., method = "rpart",
data = training2[, !names(training) %in% c("classe")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# inital classification model
suppressWarnings(mod2b <- train(classe ~ ., method = "rpart",
data = training2[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# classification using random forest
suppressWarnings(mod3b <- train(classe ~ ., method = "rf",
data = training2[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE))
set.seed(05081945)
suppressWarnings(mod1b <- train(correct ~ ., method = "rpart",
data = training2[, !names(training2) %in% c("classe")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# inital classification model
suppressWarnings(mod2b <- train(classe ~ ., method = "rpart",
data = training2[, !names(training2) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# classification using random forest
suppressWarnings(mod3b <- train(classe ~ ., method = "rf",
data = training2[, !names(training2) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE))
mod1a
mod1b
mod2b
mod3b
mod3b <- train(classe ~ ., method = "rf",
data = training2[, !names(training2) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE)
suppressMessages(library(caret))
# load the training data set
dat <- read.csv("~/Documents/code/coursera-mlp/pml-training.csv", stringsAsFactors = FALSE)
# convert timestamp to a Date object
dat$date <- as.Date(dat$cvtd_timestamp, format = "%d/%m/%Y %H:%M")
dat$cvtd_timestamp <- NULL
# make outcomes and names factors
dat$user_name <- as.factor(dat$user_name); dat$classe <- as.factor(dat$classe)
# create outcome dummy variable for correct execution
dat$correct <- as.factor(ifelse(dat$classe == "A", 1, 0))
# set as integers
dat[5:158] <- suppressWarnings(apply(dat[5:158], 2, as.numeric))
# create training, tuning, and validation sets
set.seed(1876)
inBuild <- createDataPartition(dat$classe, p = 0.8, list = FALSE)
validation <- dat[-inBuild,]
buildData <- dat[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.75, list = FALSE)
training <- buildData[inTrain, ]; tuning <- buildData[-inTrain, ]
# find variables with little to no variance
nzv <- nearZeroVar(training)
# what's left?
keep <- colnames(training[, -nzv])
# cull the training set of unwanted (near zero variance) variables
training <- training[, keep]; tuning <- tuning[, keep]
# initial logistic model
set.seed(1111911)
suppressWarnings(mod1 <- train(correct ~ ., method = "rpart",
data = training[, !names(training) %in% c("classe")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# inital classification model
suppressWarnings(mod2 <- train(classe ~ ., method = "rpart",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# classification using random forest
suppressWarnings(mod3 <- train(classe ~ ., method = "rf",
data = training[, !names(training) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale"), verbose = FALSE))
# look at out-of-sample accuracy (tuning)
confusionMatrix(predict(mod1, tuning), na.omit(tuning)$correct)$overall[1]
confusionMatrix(predict(mod2, tuning), na.omit(tuning)$classe)$overall[1]
confusionMatrix(predict(mod3, tuning), na.omit(tuning)$classe)$overall[1]
training2 <- training[, !sapply(training, function(x) any(is.na(x)))]
set.seed(05081945)
suppressWarnings(mod1b <- train(correct ~ ., method = "rpart",
data = training2[, !names(training2) %in% c("classe")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
# inital classification model
suppressWarnings(mod2b <- train(classe ~ ., method = "rpart",
data = training2[, !names(training2) %in% c("correct")],
trControl = trainControl(method = "repeatedcv"),
preProcess = c("center", "scale")))
confusionMatrix(predict(mod1b, tuning), na.omit(tuning)$correct)$overall[1]
confusionMatrix(predict(mod2b, tuning), na.omit(tuning)$classe)$overall[1]
mod1b
mod2b
mod1
mod2
mod3
mod1b
mod2b
mod3b
suppressWarnings(mod3b <- train(classe ~ ., method = "rf",
data = training2[, !names(training2) %in% c("correct")],
preProcess = c("center", "scale"), verbose = FALSE))
suppressWarnings(mod3b <- train(classe ~ ., method = "rf",
data = training2[, !names(training2) %in% c("correct")],
preProcess = c("center", "scale"))
)
mod3b <- train(classe ~ ., method = "rf",
data = training2[, !names(training2) %in% c("correct")],
preProcess = c("center", "scale"))
mod3b
training2[, !names(training2) %in% c("correct")]
library(magrittr)
training2[, !names(training2) %in% c("correct")] %>% names
training2[, !names(training2) %in% c("correct")] %>% head
suppressWarnings(mod3b <- train(classe ~ ., method = "treebag",
data = training2[, !names(training2) %in% c("correct")],
preProcess = c("center", "scale")))
mod3
mod2
mod3b
mod3b <- train(classe ~ ., method = "treebag",
data = training2[, !names(training2) %in% c("correct")])
warnings()
mod3b
confusionMatrix(predict(mod1b, tuning), na.omit(tuning)$correct)$overall[1]
predict(mod1b, tuning)
confusionMatrix(predict(mod1b, tuning), tuning$correct)$overall[1]
confusionMatrix(predict(mod2b, tuning), tuning$classe)$overall[1]
confusionMatrix(predict(mod3b, tuning), tuning$classe)$overall[1]
mod3$overall
mod3b$overall
mod3b$finalModel
plot(mod1b)
plot(mod2b)
plot(mod3b)
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
ls9
ls()
rm(list=ls())
for(10) print('hello')
complexOut <- function(start = 1, length = 10){
x <- start
y <- c(x)
for(i in 1:length){
x <- (4*x)*(1-x)
y[i] <- x
}
return(y)
}
complexOut(1, 10)
y
y <- c(1)
y
pattern <- function(x){
return((4*x)*(1-x))
}
pattern(y)
pattern(2)
pattern(-8)
pattern(-288)
x
x = -2
1 - x
complexOut <- function(start = 1, length = 10){
x <- start
y <- c(x)
for(i in 1:length){
x <- (4*x)*(1-x)
y[i+1] <- x
}
return(y)
}
complexOut(1, 10)
rm(list=ls())
pattern <- function(x){
return((4*x)*(1-x))
}
pattern(10)
x <- c(1:10)
pattern(x)
curve(4x*(1-x))
?curve
curve(pattern, -10, 10)
pattern <- function(x){
return((-4*x)*(1-x))
}
curve(pattern, -10, 10)
pattern <- function(x){
return(sin(x)*(1-x))
}
curve(pattern, -10, 10)
rnorm(1, 1)
rnorm(1, 1)
rnorm(1, 1)
rnorm(1, 1)
pattern <- function(x){
return(sin(x)*(1-x)*rnorm(1, 1))
}
curve(pattern, -10, 10)
curve(pattern, -10, 10)
curve(pattern, -10, 10)
curve(pattern, -10, 10)
curve(pattern, -10, 10)
curve(pattern, -10, 10)
curve(pattern, -10, 10)
curve(pattern, -10, 10)
pattern
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
pattern(x)
exp(x)
library(ggplot2)
library(reshape2)
df1 <- data.frame()
range <- c(-10:10)
range
?c
?":"
?seq
range <- seq(from = -10, to = 10, by = 0.1)
pass1 <- pattern(range)
pass1
plot(pass1)
curve(pass1)
plot(pass1, tyle = 'l')
plot(pass1, type = 'l')
warnings()
plot(pass1, type = 'l')
qplot(pass1)
qplot(pass1, type = 'l')
qplot(pass1, geom = 'line')
plot(pass1, type = 'l')
set.seed(100)
for(i in 1:10){
name <- paste0('pass', i)
print(name)
}
for(i in 1:10){
name <- paste0('pass', i)
name <- pattern(range)
}
name
source('~/Documents/code/capstone/build_markov.R', echo=TRUE)
source('~/Documents/code/capstone/build_markov.R', echo=TRUE)
warnings()
corp.dt %>% head
twit.mc <- fitHigherOrder(corp.dt[, .(t1, t2, t3)], order = 3)
head(corp.dt[, .(t1, t2, t3)])
tail(corp.dt[, .(t1, t2, t3)])
twit.mc <- fitHigherOrder(corp.dt[, .(t1, t2, t3)], order = 3)
x <- "text1"
corpus(text1)
corpus(x)
y <- "text2"
z <- "text3"
corpus(list(x, y, z))
?corpus
librar(tx)
library(tx)
library(tm)
Corpus(list(x, y, z))
as.VCorpus(list(x, y, z))
as.VCorpus(list(x, y, z)) %>% corpus
as.VCorpus(list(x, y, z))
vc <- as.VCorpus(list(x, y, z))
corpus(vc)
x + y
cat(x, y)
cat(x, y) %>% class
class()
c(x, y)
corpus(c(x, y))
rm(vc)
rm(list-ls())
rm(list=ls())
library(tm)
corpus(c("This is awesome.", "I am awesome.", "I once ate a grapefruit whilst standing on my head.", "It was awesome."))
library(quanteda)
corpus(c("This is awesome.", "I am awesome.", "I once ate a grapefruit whilst standing on my head.", "It was awesome."))
corp <= corpus(c("This is awesome.", "I am awesome.", "I once ate a grapefruit whilst standing on my head.", "It was awesome."))
corp <- corpus(c("This is awesome.", "I am awesome.", "I once ate a grapefruit whilst standing on my head.", "It was awesome."))
corp
summary(corp)
tm_map(corp, tolower)
stopwords('SMART')
?corpus
?dfm
source('~/Documents/code/capstone/predict2.R', echo=TRUE)
source('~/Documents/code/capstone/predict2.R', echo=TRUE)
corp <- corpus(c(twitter.sample, blogs.sample, news.sample),
toLower = TRUE, removeNumbers = TRUE, removePunct = TRUE,
removeSeparators = TRUE, stem = FALSE,
ignoredFeatures = stopwords('english'),
language = 'english')
corp <- corpus(c(twitter.sample, blogs.sample, news.sample),
removeNumbers = TRUE,
removePunct = TRUE, removeSymbols = TRUE,
removeTwitter = TRUE, removeSeparators = TRUE)
corp <- corpus(c(twitter.sample, blogs.sample, news.sample))
mydfm <- dfm(corp)
corp
strCorpus
str(corp)
corp[1]
corp[2]
corp[3]
corp[4]
corp[5]
corp[6]
corp(c("two", "hurrrr", ""))
corpus(c("two", "hurrrr", ""))
corpus(c("two", "hurrrr", "")) %>% dfm
set.seed(2001)
twitter.sample <- sampleLines('./final/en_US/en_US.twitter.txt', 0.05)
blogs.sample <- sampleLines('./final/en_US/en_US.blogs.txt', 0.05)
news.sample <- sampleLines('./final/en_US/en_US.news.txt', 0.05)
# build a document corpus from the samples
corp <- corpus(c(twitter.sample, blogs.sample, news.sample))
mydfm <- dfm(corp)
corp
n2.terms <- unlist(tokenize(corp, what = "word", ngrams = 2,
removeNumbers = TRUE, removePunct = TRUE,
removeSymbols = TRUE, removeTwitter = TRUE,
removeSeparators = TRUE))
corp.dt <- data.table(term = corp.terms)
corp.dt[, c("t1", "t2", "t3") := tstrsplit(term, "_")]
n2.dt <- data.table(term = n2.terms)
library(data.table)
n2.dt <- data.table(term = n2.terms)
n2.dt[, c("t1", "t2", "t3") := tstrsplit(term, "_")]
n2.dt[, c("t1", "t2") := tstrsplit(term, "_")]
n2.dt <- data.table(term = n2.terms)
n2.dt[, c("t1", "t2") := tstrsplit(term, "_")]
n2.mc <- fitHigherOrder(corp.dt[, .(t1, t2, t3)], order = 2)
library(markovchain)
n2.mc <- fitHigherOrder(corp.dt[, .(t1, t2, t3)], order = 2)
n2.mc <- fitHigherOrder(n2.dt[, .(t1, t2)], order = 2)
n1.mc <- markovchainFit(n2.dt[, .(t1, t2)])
n1.mc
dim(n1.mc$estimate)
str(n1.mc)
predict(n1.mc, "hello")
predict(n1.mc$estimate, "hello")
names(dim)
name(n1.mc)
rownames(n1.mc$estimate)
names(n1.mc$estimate)
predict(n1.mc$estimate, "work")
predict(n1.mc$estimate, "me")
predict(n1.mc$estimate, "your")
predict(n1.mc$estimate, "youth")
predict(n1.mc$estimate, "has")
saveRDS(n1.mc, "n1.mc.rds")
object.size(n1.mc)
object.size(n1.mc) %>% format('Mb')
head(n2.terms)
?dictionary
source("~/Documents/code/sampleLines/sampleLines.R")
rm(list=ls())
twitter.sample <- sampleLines('./final/en_US/en_US.twitter.txt', 0.01)
source("~/Documents/code/sampleLines/sampleLines.R")
set.seed(2001)
twitter.sample <- sampleLines('./final/en_US/en_US.twitter.txt', 0.01)
corp <- corpus(twitter.sample)
n3.terms <- unlist(tokenize(corp, what = "word", ngrams = 3,
removeNumbers = TRUE, removePunct = TRUE,
removeSymbols = TRUE, removeTwitter = TRUE,
removeSeparators = TRUE))
n3.dt <- data.table(term = n3.terms)
n3.dt[, c("t1", "t2") := tstrsplit(term, "_")]
n3.dt[, c("t1", "t2", "t3") := tstrsplit(term, "_")]
head(ne.dt)
head(n3.dt)
n3.mc <- fitHigerOrder(n3.dt[, .(t1, t2, t3)])
library(quanteda)
n3.mc <- fitHigerOrder(n3.dt[, .(t1, t2, t3)])
n3.mc <- fitHigherOrder(n3.dt[, .(t1, t2, t3)])
n3.mc <- fitHigherOrder(as/matrix(n3.dt[, .(t1, t2, t3)]))
n3.mc <- fitHigherOrder(as.matrix(n3.dt[, .(t1, t2, t3)]))
saveRDS(n3.mc, "n3.mc.rds")
oject.size(n3.mc)
object.size(n3.mc)
object.size(n3.mc) %>% format('Mb')
predict(n3.mc)
str(n3.mc)
?tokenize
?removeWords
ls()
corp.rm <- removeWords(corp, stopwords('english'))
corp.rm <- removeWords(c('twitter.sample', 'blogs.sample', 'news.sample'), stopwords('english'))
corp.rm
corp.rm <- removeWords(twitter.sample, stopwords('english'))
rm(list=ls)
rm(list=ls())
source('~/Documents/code/capstone/predict2.R', echo=TRUE)
object.size(n3.mc)
object.size(n3.mc) %>% format('Mb')
